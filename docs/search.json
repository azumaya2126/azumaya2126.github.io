[
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Posts",
    "section": "",
    "text": "RstudioでPythonを使う\n\n\n\n\n\n\nR\n\n\nPython\n\n\nTips\n\n\n\n\n\n\n\n\n\n2024/09/20\n\n\nazumaya\n\n\n\n\n\n\n\n\n\n\n\n\nsource関数で自作関数を呼び出す\n\n\n\n\n\n\nR\n\n\nAnalysis\n\n\nTips\n\n\n\n\n\n\n\n\n\n2024/08/24\n\n\nazumaya\n\n\n\n\n\n\n\n\n\n\n\n\n論文に載せる記述統計表を作る\n\n\n\n\n\n\nR\n\n\nAnalysis\n\n\nTips\n\n\n\n\n\n\n\n\n\n2024/08/23\n\n\nazumaya\n\n\n\n\n\n\n\n\n\n\n\n\n星野源のアルバム楽曲をRで分析してみる\n\n\n\n\n\n\nR\n\n\nAnalysis\n\n\nMusic\n\n\nSpotify\n\n\n\n\n\n\n\n\n\n2024/06/03\n\n\nazumaya\n\n\n\n\n\n\n\n\n\n\n\n\nRでSpotifyの分析\n\n\n\n\n\n\nR\n\n\nAnalysis\n\n\nMusic\n\n\nSpotify\n\n\n\n\n\n\n\n\n\n2024/05/26\n\n\nazumaya\n\n\n\n\n\n\n一致なし"
  },
  {
    "objectID": "posts/tips02/index.html",
    "href": "posts/tips02/index.html",
    "title": "source関数で自作関数を呼び出す",
    "section": "",
    "text": "自作関数をはじめ、他ファイルで定義したオブジェクトを簡単に呼び出したい。\nsource関数を使って、ファイルの壁を飛び越える。"
  },
  {
    "objectID": "posts/tips02/index.html#はじめに",
    "href": "posts/tips02/index.html#はじめに",
    "title": "source関数で自作関数を呼び出す",
    "section": "",
    "text": "自作関数をはじめ、他ファイルで定義したオブジェクトを簡単に呼び出したい。\nsource関数を使って、ファイルの壁を飛び越える。"
  },
  {
    "objectID": "posts/tips02/index.html#関数を自作した",
    "href": "posts/tips02/index.html#関数を自作した",
    "title": "source関数で自作関数を呼び出す",
    "section": "関数を自作した",
    "text": "関数を自作した\n前回、記述統計表を出力する関数summary_stats()を自作した。\n\nsummary_stats &lt;- function(df, g) { \n  # gをシンボルに変換\n  g &lt;- rlang::enquo(g)\n  \n  # グループごとのサンプル数を計算\n  n &lt;- df %&gt;% \n    filter(Species == !!g) %&gt;% \n    nrow()\n  \n  df %&gt;%\n    filter(Species == !!g) %&gt;% #\n    summarise(across(where(is.numeric), \n                     list(Mean = ~ mean(.x, na.rm = TRUE),\n                          S.D. = ~ sd(.x, na.rm = TRUE),\n                          Min. = ~ min(.x, na.rm = TRUE),\n                          Max. = ~ max(.x, na.rm = TRUE)),\n                     .names = \"{col}-{fn}\")) %&gt;% \n    round(2) %&gt;% \n    format(nsmall = 2) %&gt;% \n    pivot_longer(cols = everything(), \n                 names_to = c(\"variable\", \"stat\"), \n                 names_sep = \"-\") %&gt;% \n    pivot_wider(names_from = stat, \n                values_from = value) %&gt;% \n    cbind(num = c(1:4),.) %&gt;% \n    gt() %&gt;% \n    cols_label(num = \"\",\n               variable = \"\") %&gt;% \n    tab_header(title = rlang::as_name(g)) %&gt;%  # タイトルにグループ名gを指定\n    tab_options(heading.align = \"left\") %&gt;%   \n    tab_footnote(footnote = paste(\"*\",n, \"observations.\")) # サンプル数nをここで使う\n}"
  },
  {
    "objectID": "posts/tips02/index.html#自作関数をいつでも使いたい",
    "href": "posts/tips02/index.html#自作関数をいつでも使いたい",
    "title": "source関数で自作関数を呼び出す",
    "section": "自作関数をいつでも使いたい",
    "text": "自作関数をいつでも使いたい\nなぜ呼び出したい？\n\n1. 一度作った関数を何度も使いたい\n頑張って関数を作ったはいいものの、これを毎回コピペするのは面倒。 これみなさんどうしているんでしょうか。\n自作関数を集めたRファイルを作っていつでも呼び出せるようにしておくと便利な気がしている。\n\n\n\n\n\n\n他にもグラフ描画だったり、相関行列のテンプレにも応用できそう。 グラフによく使うカラーパレットを指定しておいたり。（.scssの設定みたいだな）\n\n\n\n\n\n2. .qmdに長いコードを書きたくない\n雑多な分析を.Rで行い、その一部を取り出して.qmdのプレゼンテーションやドキュメントにまとめたい場面が多々ある。\nそんな時、.qmd上で長々と複雑なコードを書きたくないというのが正直なところ。 レンダリングに時間がかかるし、書き換え忘れのエラーが面倒だし、cacheオプションが使いこなせていない…。\n今回作ったような自作関数だけでなく、もはやオブジェクトのすべてを呼び出せた方がありがたい。"
  },
  {
    "objectID": "posts/tips02/index.html#呼び出してみる",
    "href": "posts/tips02/index.html#呼び出してみる",
    "title": "source関数で自作関数を呼び出す",
    "section": "呼び出してみる",
    "text": "呼び出してみる\n自作関数含むオブジェクトは、source関数で呼び出せる。\n\nsource関数がないとき\nfunctions.Rに作った関数summary_stats()を使いたいとき、fuga.qmd上で直接定義していない場合はエラーとなる。\n\n\n\nfuga.qmd\n\nsummary_stats(df)\n\n\nError in summary_stats(df): could not find function \"summary_stats\"\n\n\n\n\nsource関数があるとき\nfuga.qmd上で、summary_stats()を定義したfunctions.Rを呼び出すことで関数を使えるようになる。\n\n\n\nfuga.qmd\n\nsource(\"./functions.R\")\n\n\nfunctions.Rを開いたときのEnvironmentペインが再現されるみたいなイメージと認識している。 そのため、関数以外にも変数やデータがそのまま使えるようになる。\n\n\n\n\n\n\nfunctions.Rのコードを全て実行するので、あまりにも重いと時間がかかるし、ここでエラーが出ると先に進めない。 上から下まで順番に実行されることを前提で、変数名の定義やコメントアウトを上手いことする必要がある。"
  },
  {
    "objectID": "posts/tips02/index.html#ほかの発想",
    "href": "posts/tips02/index.html#ほかの発想",
    "title": "source関数で自作関数を呼び出す",
    "section": "ほかの発想？",
    "text": "ほかの発想？\nsource()では、.Rを上から下まで実行してオブジェクトを呼び出していたけど、functions.Rのオブジェクト自体を保存して、それを呼び出す方法もある。\nfunctions.R上で作ったsummary_stats()をsaveRDS()で保存しておく。 引数に変数名を入れて実行すると、summary_stats.objが作成される。\n\n\n\nfunctions.R\n\nsaveRDS(summary_stats)\n\n\nfuga.qmd上で使いたい場合は、readRDS()で呼び出して変数に代入する。\n\n\n\nfuga.qmd\n\nsummary_stats &lt;- readRDS(\"./summary_stats.obj\")\n\n\n\n\n\n\n\n\nsource()と違って、.Rファイルの中身を実行するわけではないので、時間は短縮できる。 ただ、summary_stats()の定義を書き換えた場合、同時にsaveRDS()も実行しないとsummary_stats.objの中身が上書きされない。自作関数が増えていくと全然面倒かも。"
  },
  {
    "objectID": "posts/tips02/index.html#おわりに",
    "href": "posts/tips02/index.html#おわりに",
    "title": "source関数で自作関数を呼び出す",
    "section": "おわりに",
    "text": "おわりに\nファイルをまたいで呼び出したい内容によって、いろいろな方法がありそう。\n雑多な分析の.Rと、きれいにまとめたい.qmdの行き来が永遠の課題だ～～～。\ncacheオプションを使いこなすしかないのか。"
  },
  {
    "objectID": "posts/spotify02_gen_hoshino/index.html",
    "href": "posts/spotify02_gen_hoshino/index.html",
    "title": "星野源のアルバム楽曲をRで分析してみる",
    "section": "",
    "text": "RでSpotify分析やってみる初回。\n何ができるかを確かめつつ、星野源のアルバム楽曲の数値を可視化してみる。"
  },
  {
    "objectID": "posts/spotify02_gen_hoshino/index.html#はじめに",
    "href": "posts/spotify02_gen_hoshino/index.html#はじめに",
    "title": "星野源のアルバム楽曲をRで分析してみる",
    "section": "",
    "text": "RでSpotify分析やってみる初回。\n何ができるかを確かめつつ、星野源のアルバム楽曲の数値を可視化してみる。"
  },
  {
    "objectID": "posts/spotify02_gen_hoshino/index.html#準備",
    "href": "posts/spotify02_gen_hoshino/index.html#準備",
    "title": "星野源のアルバム楽曲をRで分析してみる",
    "section": "準備",
    "text": "準備\nライブラリ読み込みとAPI取得について、以下のコードの説明はこちらから。\n\n\nShow the code\n# パッケージ読み込み\npacman::p_load(spotifyr, tidyverse, \n               corrplot, # 相関行列表を出力したい\n               gt)    # 表を綺麗に出力したい\n\n# API取得\nSys.setenv(SPOTIFY_CLIENT_ID = \"xxxxxxxxxxxxxxxxxxxxx\")\nSys.setenv(SPOTIFY_CLIENT_SECRET = \"xxxxxxxxxxxxxxxxxxxxx\")\naccess_token &lt;- get_spotify_access_token()"
  },
  {
    "objectID": "posts/spotify02_gen_hoshino/index.html#楽曲情報取得",
    "href": "posts/spotify02_gen_hoshino/index.html#楽曲情報取得",
    "title": "星野源のアルバム楽曲をRで分析してみる",
    "section": "楽曲情報取得",
    "text": "楽曲情報取得\nget_artist_audio_features関数を使って、アーティストの楽曲情報を取りに行く。引数にはアーティスト名もしくはアーティストIDを入れる。\n\n\nShow the code\ngen &lt;- get_artist_audio_features(\"Gen Hoshino\") \n\n\n\n\n\n\n\n\nアーティストIDはどこ\n\n\n\nSpotifyのアーティストページのURLのうち　artist/XXXXXX?si=　の部分をコピペ\n\n\n最初4行だけ確認してみるとちゃんと星野源の楽曲情報が取れています。最新が上に表示されるのね。EPやシングルは含まれていません。\n\n\nShow the code\nhead(gen, 4)\n\n\n  artist_name              artist_id               album_id album_type\n1 Gen Hoshino 1S2S00lgLYLGHWA44qGEUs 2GP1RmB0LvvuXOwOmrtG86      album\n2 Gen Hoshino 1S2S00lgLYLGHWA44qGEUs 2GP1RmB0LvvuXOwOmrtG86      album\n3 Gen Hoshino 1S2S00lgLYLGHWA44qGEUs 2GP1RmB0LvvuXOwOmrtG86      album\n4 Gen Hoshino 1S2S00lgLYLGHWA44qGEUs 2GP1RmB0LvvuXOwOmrtG86      album\n                                                                                                                                                                                                                      album_images\n1 https://i.scdn.co/image/ab67616d0000b27307831685d7f988332899529a, https://i.scdn.co/image/ab67616d00001e0207831685d7f988332899529a, https://i.scdn.co/image/ab67616d0000485107831685d7f988332899529a, 640, 300, 64, 640, 300, 64\n2 https://i.scdn.co/image/ab67616d0000b27307831685d7f988332899529a, https://i.scdn.co/image/ab67616d00001e0207831685d7f988332899529a, https://i.scdn.co/image/ab67616d0000485107831685d7f988332899529a, 640, 300, 64, 640, 300, 64\n3 https://i.scdn.co/image/ab67616d0000b27307831685d7f988332899529a, https://i.scdn.co/image/ab67616d00001e0207831685d7f988332899529a, https://i.scdn.co/image/ab67616d0000485107831685d7f988332899529a, 640, 300, 64, 640, 300, 64\n4 https://i.scdn.co/image/ab67616d0000b27307831685d7f988332899529a, https://i.scdn.co/image/ab67616d00001e0207831685d7f988332899529a, https://i.scdn.co/image/ab67616d0000485107831685d7f988332899529a, 640, 300, 64, 640, 300, 64\n  album_release_date album_release_year album_release_date_precision\n1         2018-12-19               2018                          day\n2         2018-12-19               2018                          day\n3         2018-12-19               2018                          day\n4         2018-12-19               2018                          day\n  danceability energy key loudness mode speechiness acousticness\n1        0.629  0.441   9   -4.614    1      0.1260     0.033900\n2        0.598  0.819   9   -2.619    1      0.0911     0.000810\n3        0.592  0.842   6   -3.914    1      0.0612     0.000328\n4        0.450  0.769   9   -5.318    1      0.1860     0.004040\n  instrumentalness liveness valence   tempo               track_id\n1         0.00e+00   0.2340   0.782  78.177 4hQ5tBCwPRkzhFB424U63U\n2         0.00e+00   0.2180   0.878 158.115 1flvuaMS27JxpEBL0u2cWc\n3         1.58e-06   0.1290   0.591  97.093 7cwzoU55oSCNP7m8dWDShQ\n4         7.07e-05   0.0762   0.811 122.108 0YEjAa5T0NQwvB7uz1dJvW\n                                                      analysis_url\n1 https://api.spotify.com/v1/audio-analysis/4hQ5tBCwPRkzhFB424U63U\n2 https://api.spotify.com/v1/audio-analysis/1flvuaMS27JxpEBL0u2cWc\n3 https://api.spotify.com/v1/audio-analysis/7cwzoU55oSCNP7m8dWDShQ\n4 https://api.spotify.com/v1/audio-analysis/0YEjAa5T0NQwvB7uz1dJvW\n  time_signature\n1              4\n2              4\n3              4\n4              4\n                                                                                                                                                                                                artists\n1 https://api.spotify.com/v1/artists/1S2S00lgLYLGHWA44qGEUs, 1S2S00lgLYLGHWA44qGEUs, Gen Hoshino, artist, spotify:artist:1S2S00lgLYLGHWA44qGEUs, https://open.spotify.com/artist/1S2S00lgLYLGHWA44qGEUs\n2 https://api.spotify.com/v1/artists/1S2S00lgLYLGHWA44qGEUs, 1S2S00lgLYLGHWA44qGEUs, Gen Hoshino, artist, spotify:artist:1S2S00lgLYLGHWA44qGEUs, https://open.spotify.com/artist/1S2S00lgLYLGHWA44qGEUs\n3 https://api.spotify.com/v1/artists/1S2S00lgLYLGHWA44qGEUs, 1S2S00lgLYLGHWA44qGEUs, Gen Hoshino, artist, spotify:artist:1S2S00lgLYLGHWA44qGEUs, https://open.spotify.com/artist/1S2S00lgLYLGHWA44qGEUs\n4 https://api.spotify.com/v1/artists/1S2S00lgLYLGHWA44qGEUs, 1S2S00lgLYLGHWA44qGEUs, Gen Hoshino, artist, spotify:artist:1S2S00lgLYLGHWA44qGEUs, https://open.spotify.com/artist/1S2S00lgLYLGHWA44qGEUs\n  disc_number duration_ms explicit\n1           1      182000    FALSE\n2           1      251266    FALSE\n3           1      187000    FALSE\n4           1      239933    FALSE\n                                                track_href is_local is_playable\n1 https://api.spotify.com/v1/tracks/4hQ5tBCwPRkzhFB424U63U    FALSE        TRUE\n2 https://api.spotify.com/v1/tracks/1flvuaMS27JxpEBL0u2cWc    FALSE        TRUE\n3 https://api.spotify.com/v1/tracks/7cwzoU55oSCNP7m8dWDShQ    FALSE        TRUE\n4 https://api.spotify.com/v1/tracks/0YEjAa5T0NQwvB7uz1dJvW    FALSE        TRUE\n  track_name\n1  Pop Virus\n2         恋\n3 Get a Feel\n4         肌\n                                                                                            track_preview_url\n1 https://p.scdn.co/mp3-preview/aac3bbc9cc1adfbf483c6e8944db788e9e4452b2?cid=44af3e1025034575bf0766d197d738e6\n2 https://p.scdn.co/mp3-preview/8b681e4045fc31a9f7d6661e67988226cca7d839?cid=44af3e1025034575bf0766d197d738e6\n3 https://p.scdn.co/mp3-preview/69e726a36a79bf9416eccdb21b4c92b662f2b37b?cid=44af3e1025034575bf0766d197d738e6\n4 https://p.scdn.co/mp3-preview/96ce2d84c4b8ed943e73e8c8e3a24489cd796b8e?cid=44af3e1025034575bf0766d197d738e6\n  track_number  type                            track_uri\n1            1 track spotify:track:4hQ5tBCwPRkzhFB424U63U\n2            2 track spotify:track:1flvuaMS27JxpEBL0u2cWc\n3            3 track spotify:track:7cwzoU55oSCNP7m8dWDShQ\n4            4 track spotify:track:0YEjAa5T0NQwvB7uz1dJvW\n                                  external_urls.spotify album_name key_name\n1 https://open.spotify.com/track/4hQ5tBCwPRkzhFB424U63U  POP VIRUS        A\n2 https://open.spotify.com/track/1flvuaMS27JxpEBL0u2cWc  POP VIRUS        A\n3 https://open.spotify.com/track/7cwzoU55oSCNP7m8dWDShQ  POP VIRUS       F#\n4 https://open.spotify.com/track/0YEjAa5T0NQwvB7uz1dJvW  POP VIRUS        A\n  mode_name key_mode\n1     major  A major\n2     major  A major\n3     major F# major\n4     major  A major\n\n\n列が多すぎるので列名だけ見てみる。いろんなことできそう。\n\n\nShow the code\ncolnames(gen)\n\n\n [1] \"artist_name\"                  \"artist_id\"                   \n [3] \"album_id\"                     \"album_type\"                  \n [5] \"album_images\"                 \"album_release_date\"          \n [7] \"album_release_year\"           \"album_release_date_precision\"\n [9] \"danceability\"                 \"energy\"                      \n[11] \"key\"                          \"loudness\"                    \n[13] \"mode\"                         \"speechiness\"                 \n[15] \"acousticness\"                 \"instrumentalness\"            \n[17] \"liveness\"                     \"valence\"                     \n[19] \"tempo\"                        \"track_id\"                    \n[21] \"analysis_url\"                 \"time_signature\"              \n[23] \"artists\"                      \"disc_number\"                 \n[25] \"duration_ms\"                  \"explicit\"                    \n[27] \"track_href\"                   \"is_local\"                    \n[29] \"is_playable\"                  \"track_name\"                  \n[31] \"track_preview_url\"            \"track_number\"                \n[33] \"type\"                         \"track_uri\"                   \n[35] \"external_urls.spotify\"        \"album_name\"                  \n[37] \"key_name\"                     \"mode_name\"                   \n[39] \"key_mode\""
  },
  {
    "objectID": "posts/spotify02_gen_hoshino/index.html#指標",
    "href": "posts/spotify02_gen_hoshino/index.html#指標",
    "title": "星野源のアルバム楽曲をRで分析してみる",
    "section": "指標",
    "text": "指標\n分からなさそうな指標をChat GPTに聞いてみた。（間違っているかもしれない。）\n\ndanceability\n\n楽曲がどれだけ踊りやすいかを示します。0.0から1.0までの範囲で、1.0に近いほどダンサブルです。\n\nenergy\n\n楽曲の強度と活動量を示します。0.0から1.0までの範囲で、1.0に近いほどエネルギッシュです。\n\nkey\n\n楽曲の音楽的なキーを整数で表します。0（C）から11（B）までの範囲です。\n\nloudness\n\n楽曲の平均音量をデシベル（dB）で表します。\n\nmode\n\n楽曲のモードを示します。メジャー（1）かマイナー（0）です。\n\nspeechiness\n\n楽曲の中で言葉がどれだけ支配的かを示します。0.0から1.0までの範囲で、1.0に近いほどスピーチ（話し言葉）が多いです。\n\nacousticness\n\n楽曲がどれだけアコースティックであるかを示します。0.0から1.0までの範囲で、1.0に近いほどアコースティックです。\n\ninstrumentalness\n\n楽曲がどれだけインストゥルメンタル（ボーカルがない）かを示します。0.0から1.0までの範囲で、1.0に近いほどインストゥルメンタルです。\n\nliveness\n\n楽曲がどれだけライブ録音のように感じるかを示します。0.0から1.0までの範囲で、1.0に近いほどライブ感があります。\n\nvalence\n\n楽曲のポジティブさを示します。0.0から1.0までの範囲で、1.0に近いほどポジティブ（陽気）です。\n\ntempo\n\n楽曲のテンポ（BPM：Beats Per Minute）を表します。\n\nduration_ms\n\n楽曲の長さをミリ秒で表します。\n\n\n使いそうな列だけ抽出する。\n\n\nShow the code\ngen &lt;- gen %&gt;% \n  select(album_name, album_release_year, track_name, \n         danceability, energy, loudness, speechiness, acousticness, instrumentalness, liveness, valence,\n         tempo, duration_ms) %&gt;% \n  rename(album = album_name, \n         year = album_release_year,\n         track = track_name) # 長いので略します\n\nhead(gen, 4)\n\n\n      album year      track danceability energy loudness speechiness\n1 POP VIRUS 2018  Pop Virus        0.629  0.441   -4.614      0.1260\n2 POP VIRUS 2018         恋        0.598  0.819   -2.619      0.0911\n3 POP VIRUS 2018 Get a Feel        0.592  0.842   -3.914      0.0612\n4 POP VIRUS 2018         肌        0.450  0.769   -5.318      0.1860\n  acousticness instrumentalness liveness valence   tempo duration_ms\n1     0.033900         0.00e+00   0.2340   0.782  78.177      182000\n2     0.000810         0.00e+00   0.2180   0.878 158.115      251266\n3     0.000328         1.58e-06   0.1290   0.591  97.093      187000\n4     0.004040         7.07e-05   0.0762   0.811 122.108      239933"
  },
  {
    "objectID": "posts/spotify02_gen_hoshino/index.html#分析",
    "href": "posts/spotify02_gen_hoshino/index.html#分析",
    "title": "星野源のアルバム楽曲をRで分析してみる",
    "section": "分析",
    "text": "分析\n今回は「星野源のアルバム5枚の変遷を耳で知っているけど、それって数値にどう表れているんだろう？」を見てみたい。\n星野源のこれまでのアルバム名と発売年\n\n\nShow the code\ngen %&gt;% \n  select(album, year) %&gt;% \n  unique() %&gt;% # 一意の値を抽出\n  arrange(year) %&gt;% \n  gt() # 綺麗な表にする\n\n\n\n\n\n\n\n\nalbum\nyear\n\n\n\n\nばかのうた\n2010\n\n\nエピソード\n2011\n\n\nStranger\n2013\n\n\nYELLOW DANCER\n2015\n\n\nPOP VIRUS\n2018\n\n\n\n\n\n\n\n\n相関\nとりあえずアルバム5枚全曲で指標の相関を見てみる。\n\n\nShow the code\ngen %&gt;% \n  select_if(is.numeric) %&gt;% # 数値型の列のみ選択\n  cor(use = \"pairwise.complete.obs\") %&gt;%\n  corrplot(tl.col=\"black\",  addCoef.col = \"black\", method = \"square\", shade.col = NA)\n\n\n\n\n\n\n\n\n\n(見づらい。列数が多くても簡単に綺麗に見やすく相関行列表が出力される方法を模索中)→追記\nざっくり感想\n\ndanceabilityとenergy って相関強くないんだ\nしかも、danceabilityとtempoって負の相関なんだ！？そういやダンスミュージックだからといってテンポが速いわけではないな\ntempoは、danceability以外とほとんど相関がないから、他のエネルギッシュとかポジティブさはテンポの要素を抜いた指標になっている？\nyearとloudnessは正の相関、yearとacousticnessは負の相関なので、昔の曲の方が静かでアコースティックな体感と合ってますね。\nyear とduration_msを見ると正の相関なので、最近の曲は短いって時流とは違う方向。\n\n\n\n箱ひげ図\n0 ~ 1の範囲を取る7指標の分布を見てみる。\n\n\nShow the code\ngen %&gt;% \n  pivot_longer(cols = c(danceability, energy, speechiness, acousticness, instrumentalness, liveness, valence), # 指標を1つの列に\n               names_to = \"measurement\") %&gt;% # 列名を変える\n  ggplot(aes(x = measurement, y = value, colour = measurement)) + \n  geom_boxplot() + \n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nacousticnessは、ほぼ0からほぼ1まで分布が広い。初期アルバムのギター1本弾き語りに近い曲から、最新アルバムのばちばちダンスミュージックまであるのでこれが反映されていそう。\n一方、danceabilityは案外幅が狭くて、弾き語り曲でも0.3くらいは持っているっぽい。\nenergyとvalenceは幅広い分布が似ている。エネルギッシュと陽気の違いはなんだ。\ninstrumentalnessで大きく外れている3曲は、インスト曲たち。それはそう。（デイジーお味噌汁、さようならのうみ、Nerd Strut）\nlivenessでは2曲（化物、アルバム隠しトラックのStranger）が大きく外れている。あまりピンとこない。\n話し言葉の程度を表すspeechinessは、上位はがKIDS、アイデア、肌、Soul。分かるような分からないような。\n\n\n\ndanceabilityを見てみる\ndanceabilityが高い順トップ10を見てみる。\n\n\nShow the code\ngen %&gt;% \n  arrange(desc(danceability)) %&gt;% # desc(降順)で並べる\n  select(album, year, track, danceability) %&gt;% \n  head(10) %&gt;% \n  gt()\n\n\n\n\n\n\n\n\nalbum\nyear\ntrack\ndanceability\n\n\n\n\nYELLOW DANCER\n2015\n桜の森\n0.870\n\n\nYELLOW DANCER\n2015\nSnow Men\n0.843\n\n\nPOP VIRUS\n2018\nKIDS\n0.842\n\n\nYELLOW DANCER\n2015\nNerd Strut (Instrumental)\n0.834\n\n\nYELLOW DANCER\n2015\nDown Town\n0.829\n\n\nエピソード\n2011\n湯気\n0.816\n\n\nPOP VIRUS\n2018\nPair Dancer\n0.807\n\n\nエピソード\n2011\nストーブ\n0.797\n\n\nYELLOW DANCER\n2015\nSUN\n0.782\n\n\nPOP VIRUS\n2018\nサピエンス\n0.781\n\n\n\n\n\n\n\n桜の森が堂々1位で嬉しくなりました。他には、Sonow Men、Down Town、湯気あたり、納得の布陣。KIDSやストーブはちょっと意外。\nコードのコピペも面倒なので、引数に指標名を入れたら上位/下位10曲を表で出力する関数を作ってみます。\n\n\nShow the code\n# 上位10曲\ntop10 &lt;- function(measurement){\n  gen %&gt;% \n    arrange(desc(!!sym(measurement))) %&gt;% #降順\n    select(album, year, track, !!sym(measurement)) %&gt;% # アルバム名、年、曲名と指定した指標を残す\n    head(10) %&gt;% \n    gt()\n}\n\n# 下位10曲\nbottom10 &lt;- function(measurement){\n  gen %&gt;% \n    arrange(!!sym(measurement)) %&gt;% # 昇順\n    select(album, year, track, !!sym(measurement)) %&gt;% \n    head(10) %&gt;% \n    gt()\n}\n\n\n\n\n\n\n\n\n!!sym()ってなんだ\n\n\n\n今回の関数では、引数に指定した文字列を変数名として使いたくて!!sym()というおまじないをつけました。通常、R上で\"で囲まれたものは文字列として認識されますが、どうやらrlangによって、クオーテーション\"があるなしと変数の行き来ができるみたいです。\nかなり複雑で、あまり分かっていません。勉強したい。\n\n\nということで下位10曲はこちら。\n\n\nShow the code\nbottom10(\"danceability\") # 関数の引数指定は\"文字列\"で\n\n\n\n\n\n\n\n\nalbum\nyear\ntrack\ndanceability\n\n\n\n\nばかのうた\n2010\n老夫婦\n0.352\n\n\nばかのうた\n2010\nばかのうた\n0.366\n\n\nStranger\n2013\n季節\n0.396\n\n\nStranger\n2013\nワークソング\n0.413\n\n\nばかのうた\n2010\nただいま\n0.443\n\n\nエピソード\n2011\nエピソード\n0.444\n\n\nばかのうた\n2010\nさようならのうみ (Instrumental)\n0.444\n\n\nPOP VIRUS\n2018\n肌\n0.450\n\n\nStranger\n2013\nレコードノイズ\n0.472\n\n\nPOP VIRUS\n2018\nアイデア\n0.478\n\n\n\n\n\n\n\n個人的に肌は踊り曲だと思っていた。トップ10より古い年代のものが入ってますね、割と納得。\n\n\nenergyを見てみる\n上位10曲はこちら。\n\n\nShow the code\ntop10(\"energy\")\n\n\n\n\n\n\n\n\nalbum\nyear\ntrack\nenergy\n\n\n\n\nYELLOW DANCER\n2015\nCrazy Crazy\n0.930\n\n\nYELLOW DANCER\n2015\n地獄でなぜ悪い\n0.894\n\n\nPOP VIRUS\n2018\nHello Song\n0.887\n\n\nPOP VIRUS\n2018\nContinues\n0.884\n\n\nStranger\n2013\n化物\n0.858\n\n\nPOP VIRUS\n2018\nPresent\n0.848\n\n\nStranger\n2013\n夢の外へ\n0.848\n\n\nPOP VIRUS\n2018\nGet a Feel\n0.842\n\n\nPOP VIRUS\n2018\n恋\n0.819\n\n\nPOP VIRUS\n2018\nFamily Song\n0.776\n\n\n\n\n\n\n\nとても納得。テンポ速そうなイメージの曲が多いけど、Continuesなど、案外速すぎずしっかり踏みしめる曲って感じ。そういや恋も特別速くはない。 Presentは少し意外だけど、ホーン隊もコーラスもがっつりでR&Bっぽい感じがエネルギッシュなのかしら。\n下位10曲はこちら。\n\n\nShow the code\nbottom10(\"energy\")\n\n\n\n\n\n\n\n\nalbum\nyear\ntrack\nenergy\n\n\n\n\nエピソード\n2011\nバイト\n0.0145\n\n\nYELLOW DANCER\n2015\n口づけ\n0.0200\n\n\nばかのうた\n2010\nさようならのうみ (Instrumental)\n0.0435\n\n\nStranger\n2013\nStranger\n0.0668\n\n\nエピソード\n2011\nエピソード\n0.0680\n\n\nYELLOW DANCER\n2015\n夜\n0.0797\n\n\nStranger\n2013\nスカート\n0.1200\n\n\nエピソード\n2011\nストーブ\n0.2060\n\n\nエピソード\n2011\n布団\n0.2180\n\n\nばかのうた\n2010\nばらばら\n0.2490\n\n\n\n\n\n\n\n箱ひげ図でも分布の幅が広いなと思っていたけど、1位のCrazy Crazyが0.93のところ、下位6曲は0.1を切っている。\nこちらも納得の布陣。初期曲や、ポップなアルバムの中の休み曲（口づけ、夜）という感じ。個人的にはYELLOW DANCERのアルバム曲順のバランス、とてもお気に入り。高校受験期に擦り切れるほど聴いた。\n\n\nvalenceを見てみる\nenergyと近いんじゃないかと予想している。\n\n\nShow the code\ntop10(\"valence\")\n\n\n\n\n\n\n\n\nalbum\nyear\ntrack\nvalence\n\n\n\n\nYELLOW DANCER\n2015\n桜の森\n0.926\n\n\nStranger\n2013\n夢の外へ\n0.908\n\n\nYELLOW DANCER\n2015\nSoul\n0.902\n\n\nStranger\n2013\n化物\n0.899\n\n\nYELLOW DANCER\n2015\n地獄でなぜ悪い\n0.892\n\n\nPOP VIRUS\n2018\nHello Song\n0.889\n\n\nPOP VIRUS\n2018\n恋\n0.878\n\n\nばかのうた\n2010\n穴を掘る\n0.874\n\n\nばかのうた\n2010\n兄妹\n0.866\n\n\nYELLOW DANCER\n2015\nSUN\n0.858\n\n\n\n\n\n\n\nたしかに上位5/10曲が被っている。1stアルバムの穴を掘ると兄妹は意外。ただ、曲を改めて聴いてみると陽の気は感じる。\n\n\nShow the code\nbottom10(\"valence\")\n\n\n\n\n\n\n\n\nalbum\nyear\ntrack\nvalence\n\n\n\n\nYELLOW DANCER\n2015\n夜\n0.133\n\n\nPOP VIRUS\n2018\nNothing\n0.186\n\n\nエピソード\n2011\n未来\n0.255\n\n\nばかのうた\n2010\n老夫婦\n0.256\n\n\nばかのうた\n2010\nばかのうた\n0.259\n\n\nばかのうた\n2010\nひらめき\n0.289\n\n\nStranger\n2013\nレコードノイズ\n0.324\n\n\nYELLOW DANCER\n2015\nミスユー\n0.328\n\n\nStranger\n2013\n知らない\n0.339\n\n\nばかのうた\n2010\n夜中唄\n0.351\n\n\n\n\n\n\n\n下位曲はenergyと指標と被っていない。「昔は暗い曲ばっかりだった」と本人が言っていたのと合っている。私は全く分からないけど、曲の調と関係しているのかも？\n\n\nacousticnessを見てみる\nこれはさすがに分かりやすい気がする。\n\n\nShow the code\ntop10(\"acousticness\")\n\n\n\n\n\n\n\n\nalbum\nyear\ntrack\nacousticness\n\n\n\n\nばかのうた\n2010\nさようならのうみ (Instrumental)\n0.990\n\n\nばかのうた\n2010\nデイジーお味噌汁 (Instrumental)\n0.974\n\n\nYELLOW DANCER\n2015\n夜\n0.971\n\n\nYELLOW DANCER\n2015\n口づけ\n0.927\n\n\nエピソード\n2011\nエピソード\n0.910\n\n\nばかのうた\n2010\nばらばら\n0.885\n\n\nばかのうた\n2010\nひらめき\n0.881\n\n\nエピソード\n2011\nバイト\n0.880\n\n\nStranger\n2013\nスカート\n0.877\n\n\nばかのうた\n2010\n子供\n0.871\n\n\n\n\n\n\n\n初期曲が多め。数値も高め。試しにacousticnessが0.8より大きい曲を見てみる。\n\n\nShow the code\ngen %&gt;% \n  filter(acousticness &gt; 0.8) %&gt;% \n  select(album, year, track, acousticness) %&gt;%\n  gt()\n\n\n\n\n\n\n\n\nalbum\nyear\ntrack\nacousticness\n\n\n\n\nYELLOW DANCER\n2015\n口づけ\n0.927\n\n\nYELLOW DANCER\n2015\n夜\n0.971\n\n\nStranger\n2013\nスカート\n0.877\n\n\nエピソード\n2011\nエピソード\n0.910\n\n\nエピソード\n2011\nくだらないの中に\n0.819\n\n\nエピソード\n2011\n布団\n0.836\n\n\nエピソード\n2011\nバイト\n0.880\n\n\nエピソード\n2011\nストーブ\n0.859\n\n\nばかのうた\n2010\nばらばら\n0.885\n\n\nばかのうた\n2010\nキッチン\n0.812\n\n\nばかのうた\n2010\nデイジーお味噌汁 (Instrumental)\n0.974\n\n\nばかのうた\n2010\n子供\n0.871\n\n\nばかのうた\n2010\nさようならのうみ (Instrumental)\n0.990\n\n\nばかのうた\n2010\nひらめき\n0.881\n\n\nばかのうた\n2010\nばかのうた\n0.846\n\n\n\n\n\n\n\n1stアルバムばかのうたと 2ndアルバムエピソードからが多い。 初期アルバムの数曲やシングルのカップリングから試していたポップさが、 3rdアルバムStrangerから （厳密には2ndアルバム後のシングルフィルムと 夢の外へから） だんだんと増えて今の星野源になっている感じが分かる。\nちなみに下位10曲。\n\n\nShow the code\nbottom10(\"acousticness\")\n\n\n\n\n\n\n\n\nalbum\nyear\ntrack\nacousticness\n\n\n\n\nPOP VIRUS\n2018\nHello Song\n0.000209\n\n\nPOP VIRUS\n2018\nGet a Feel\n0.000328\n\n\nPOP VIRUS\n2018\n恋\n0.000810\n\n\nPOP VIRUS\n2018\nアイデア\n0.001970\n\n\nPOP VIRUS\n2018\n肌\n0.004040\n\n\nYELLOW DANCER\n2015\nNerd Strut (Instrumental)\n0.006970\n\n\nPOP VIRUS\n2018\nFamily Song\n0.007880\n\n\nYELLOW DANCER\n2015\nFriend Ship\n0.010500\n\n\nPOP VIRUS\n2018\nPresent\n0.012600\n\n\nPOP VIRUS\n2018\nNothing\n0.017300\n\n\n\n\n\n\n\nアルバムの並びがちゃんと上位10曲の裏返しになっている。acousticnessが0.1より小さい曲を見てみる。\n\n\nShow the code\ngen %&gt;% \n  filter(acousticness &lt; 0.1) %&gt;% \n  select(album, year, track, acousticness) %&gt;%\n  gt()\n\n\n\n\n\n\n\n\nalbum\nyear\ntrack\nacousticness\n\n\n\n\nPOP VIRUS\n2018\nPop Virus\n0.033900\n\n\nPOP VIRUS\n2018\n恋\n0.000810\n\n\nPOP VIRUS\n2018\nGet a Feel\n0.000328\n\n\nPOP VIRUS\n2018\n肌\n0.004040\n\n\nPOP VIRUS\n2018\nPair Dancer\n0.034600\n\n\nPOP VIRUS\n2018\nPresent\n0.012600\n\n\nPOP VIRUS\n2018\nDead Leaf\n0.041500\n\n\nPOP VIRUS\n2018\nContinues\n0.018600\n\n\nPOP VIRUS\n2018\nサピエンス\n0.076300\n\n\nPOP VIRUS\n2018\nアイデア\n0.001970\n\n\nPOP VIRUS\n2018\nFamily Song\n0.007880\n\n\nPOP VIRUS\n2018\nNothing\n0.017300\n\n\nPOP VIRUS\n2018\nHello Song\n0.000209\n\n\nYELLOW DANCER\n2015\n時よ\n0.022400\n\n\nYELLOW DANCER\n2015\nWeek End\n0.042600\n\n\nYELLOW DANCER\n2015\nSUN\n0.021000\n\n\nYELLOW DANCER\n2015\nNerd Strut (Instrumental)\n0.006970\n\n\nYELLOW DANCER\n2015\nDown Town\n0.022700\n\n\nYELLOW DANCER\n2015\nFriend Ship\n0.010500\n\n\nStranger\n2013\n知らない\n0.060200\n\n\n\n\n\n\n\n3rdアルバムの 知らない が一番高くて0.06で、それ以外は全て4thアルバム YELLOW DANCER と5thアルバム POP VIRUS の曲たち。系統がガラッと変わっていることが分かる。"
  },
  {
    "objectID": "posts/spotify02_gen_hoshino/index.html#おわりに",
    "href": "posts/spotify02_gen_hoshino/index.html#おわりに",
    "title": "星野源のアルバム楽曲をRで分析してみる",
    "section": "おわりに",
    "text": "おわりに\nもう少しできそうだけどここまでにします。\n初回なので指標を見つつ、自分が曲を聴いてきた感覚と数値を答え合わせする回でした。星野源曲を聴きながら作業するの楽しかった。まだまだできる。\n今後は、アルバム曲以外も含めたり、大好きカップリング曲に焦点を当てたり、主成分分析（できるかな）もしてみたい。\n最新アルバムPOP VIRUSが発売されて6年（！？）、ワールドツアーとコロナ禍を経て、音楽の聴かれ方も、作曲方法も変わってまた進化しているので、最近の曲も見てみたいところ。次のアルバムが発売される時にはどんな曲がどんな曲順で入るんだろうと考えるのが楽しいです。\n曲名やアルバム名にはリンクを貼っているのでぜひ聴いてみてください。"
  },
  {
    "objectID": "posts/spotify02_gen_hoshino/index.html#add",
    "href": "posts/spotify02_gen_hoshino/index.html#add",
    "title": "星野源のアルバム楽曲をRで分析してみる",
    "section": "追記",
    "text": "追記\n相関係数行列の出力について、このサイトを教えていただきました。ありがとうございます。\n参考にしながら作ってみました。\n\n\nShow the code\n# デフォルトだと黒文字が見えないので、見えるくらいに5段階で色指定\ncol &lt;- colorRampPalette(c(\"#BB4444\", \"#EE9988\", \"#FFFFFF\", \"#77AADD\", \"#4477AA\"))\n\ngen %&gt;% \n  select_if(is.numeric) %&gt;%\n  cor() %&gt;%\n  corrplot(method = \"color\", # セルに色塗りで出力\n           addCoef.col = \"black\", # 係数の文字色\n           tl.col = \"black\", # 変数の文字色\n           col = col(200), # 指定した色を200分割グラデーション\n           type = \"upper\", # 行列の上側のみ表示\n           tl.srt = 45, # 変数名が長いので45度に傾ける\n           diag = FALSE # 同じ変数同士の相関(1)を隠す\n           )\n\n\n\n\n\n\n\n\n\nかなり見やすい！\nちなみに有意性の検定結果も組み込むことができるらしい。\n\n\nShow the code\n# 95%信頼区間でcor.mtest関数の定義（なぜデフォルトじゃないんだ）\ncor.mtest &lt;- function(mat, conf.level = 0.95) {\n    mat &lt;- as.matrix(mat)\n    n &lt;- ncol(mat)\n    p.mat &lt;- matrix(NA, n, n)\n    diag(p.mat) &lt;- 0\n    for (i in 1:(n - 1)) {\n        for (j in (i + 1):n) {\n            if (all(!is.na(mat[, i])) & all(!is.na(mat[, j]))) {\n                tmp &lt;- cor.test(mat[, i], mat[, j], conf.level = conf.level)\n                p.mat[i, j] &lt;- p.mat[j, i] &lt;- tmp$p.value\n            }\n        }\n    }\n    colnames(p.mat) &lt;- rownames(p.mat) &lt;- colnames(mat)\n    p.mat\n}\n\n# 相関行列を計算\ncor_matrix &lt;- gen %&gt;% \n  select_if(is.numeric) %&gt;%\n  cor()\n\n# p値を計算\np.mat &lt;- cor.mtest(cor_matrix)\n\ncorrplot(cor_matrix, \n         method = \"color\", \n         addCoef.col = \"black\",\n         tl.col = \"black\", \n         col = col(200), \n         type = \"upper\", \n         tl.srt = 45, \n         diag = FALSE,  \n         p.mat = p.mat,\n         sig.level = 0.05, # 閾値\n         insig = \"blank\" # 有意でないセルは空白に\n         )\n\n\n\n\n\n\n\n\n\nこれはこれでちょっと見にくい気もする。\nとにかく、色を調節して変数名を斜めに表示するひと手間を加えることでかなり見やすくなりました。よし！"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "azumaya web",
    "section": "",
    "text": "興味、関心、趣味など"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "azumaya web",
    "section": "",
    "text": "興味、関心、趣味など"
  },
  {
    "objectID": "index.html#posts",
    "href": "index.html#posts",
    "title": "azumaya web",
    "section": "Posts",
    "text": "Posts\n分析、勉強、練習など"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "所属\n\n経営学部→経営学研究科M2\n\nスキル\n\nR：5年目、日々精進\nQuarto：趣味\nPython：ぼちぼち\nGitHub：まだまだこれから\nAdobe Illustrator：6年目、紙媒体が好き\nAdobe After Effects：まだまだこれから\n\nいつかKaggleに参加したいです。"
  },
  {
    "objectID": "about.html#about-me",
    "href": "about.html#about-me",
    "title": "About",
    "section": "",
    "text": "所属\n\n経営学部→経営学研究科M2\n\nスキル\n\nR：5年目、日々精進\nQuarto：趣味\nPython：ぼちぼち\nGitHub：まだまだこれから\nAdobe Illustrator：6年目、紙媒体が好き\nAdobe After Effects：まだまだこれから\n\nいつかKaggleに参加したいです。"
  },
  {
    "objectID": "about.html#favorite",
    "href": "about.html#favorite",
    "title": "About",
    "section": "Favorite",
    "text": "Favorite\n\n音楽\n\n\n\n\n本\nこれまでに読んだ本\nお気に入り\n\n橋爪大三郎 (1988)『はじめての構造主義』講談社現代新書.\nマックス・ウェーバー著, 中山元訳(2010)『プロテスタンティズムの倫理と資本主義の精神』日経BP.\nカルロ・マリア・チッポラ著, 徳橋曜訳 (2001)『経済史への招待: 歴史学と経済学のはざまへ』国文社.\n\n\n\n作品\n\n森見登美彦\n「少女☆歌劇レヴュースタァライト」シリーズ\n濱祐斗デザイン事務所"
  },
  {
    "objectID": "about.html#memo",
    "href": "about.html#memo",
    "title": "About",
    "section": "Memo",
    "text": "Memo\n今後分析したい、勉強したい、まとめたいあれこれ\n\n分析とか勉強とか\n\nSpotifyのデータであれこれ\n歌詞のテキスト分析\n実データでポートフォリオ・ソート\n正規表現\n画像認識\nGIS\nSQL\n論文レプリケーション（Burgstahler and Dichev (1997), Sloan (1996)）\nQuartoでTikz\n\n\n\n\n\n\n\n\n\n\nR / Quarto Tips\n\n効率的に表記ゆれを直したい\nQuartoを書きたいhtml/css初心者\n変数の命名規則、そろそろ整理しよう\n\n\n\nAdobe Illustrator\n\nバッチ処理\nアクションボタン\n文字組み"
  },
  {
    "objectID": "posts/spotify01/index.html",
    "href": "posts/spotify01/index.html",
    "title": "RでSpotifyの分析",
    "section": "",
    "text": "世の中にPythonを使ったSpotify分析はたくさんあるけど、Rでもやってみたい。\nまずは、RでSpotifyの情報にアクセスできるようになり、これまでなんとなく感じていた音楽を数値的に見てみる準備をする。"
  },
  {
    "objectID": "posts/spotify01/index.html#はじめに",
    "href": "posts/spotify01/index.html#はじめに",
    "title": "RでSpotifyの分析",
    "section": "",
    "text": "世の中にPythonを使ったSpotify分析はたくさんあるけど、Rでもやってみたい。\nまずは、RでSpotifyの情報にアクセスできるようになり、これまでなんとなく感じていた音楽を数値的に見てみる準備をする。"
  },
  {
    "objectID": "posts/spotify01/index.html#spotifyの情報を使えるようにする",
    "href": "posts/spotify01/index.html#spotifyの情報を使えるようにする",
    "title": "RでSpotifyの分析",
    "section": "Spotifyの情報を使えるようにする",
    "text": "Spotifyの情報を使えるようにする\n\nパッケージのインストール\nRでSpotifyの情報を取得するパッケージspotifyrがある。 CRAN version 2.1.0であれば以下でインストールできるっぽい。\n\n# パッケージをインストールして読み込み\npacman::p_load(spotifyr)\n\n\n\n\n\n\n\n最近はpacmanパッケージのp_load()をよく使っています。install.packages()とlibrary()の合わせ技で、パッケージがインストールされていなかったらインストールを含め、読み込みまでやってくれる。\nR人生で一度だけpacmanをインストールしておけば、「このパッケージってインストールしてたかな」から解放されるし、パッケージ読み込みが1行で済むのは案外便利。\n他にも続けてライブラリを読み込みたい時は、pacman::p_load(spotifyr, tidyverse)のようにカンマでつなげる。\n\n\n\n\n\nAPI情報を取得\n\nSpotifyのアカウントでSpotify for Developersにログインする\nDashboardからCreate appでappを作る\n必要事項に入力してSave（Redirect URLsは何を入れたら分からなかったけど例に書いてあるURL入れたらOKだった。いいの？）\nDashboardからappを選択して、Settings &gt; Basic InformationからCliant IDとClient secret（隠されている）をコピーして、以下の通り実行\n\n\n\nSys.setenv(SPOTIFY_CLIENT_ID = 'xxxxxxxxxxxxxxxxxxxxx')\nSys.setenv(SPOTIFY_CLIENT_SECRET = 'xxxxxxxxxxxxxxxxxxxxx')\n\naccess_token &lt;- get_spotify_access_token()\n\nこれでSpotifyの情報取り放題～\n\n\n\n\n\n\n大量のデータを取得しようとしたり、短時間に何度もget_spotify_access_token()を行うとAPI取得制限に引っ掛かることがあります。 具体的にどの程度の負荷をかけるとダメなのかは分かりませんが。時間を置いて再度試してみてください。"
  },
  {
    "objectID": "posts/spotify01/index.html#分析",
    "href": "posts/spotify01/index.html#分析",
    "title": "RでSpotifyの分析",
    "section": "分析",
    "text": "分析\nSpotify APIを使った分析はこちら"
  },
  {
    "objectID": "posts/spotify01/index.html#参考",
    "href": "posts/spotify01/index.html#参考",
    "title": "RでSpotifyの分析",
    "section": "参考",
    "text": "参考\nspotifyr\n【R】Spotify APIを利用して関連するアーティストをDigりまくる"
  },
  {
    "objectID": "posts/tips01/index.html",
    "href": "posts/tips01/index.html",
    "title": "論文に載せる記述統計表を作る",
    "section": "",
    "text": "記述統計を出力する関数はたくさんあるけれど、どれも少しずつもの足りない。\n既存のパッケージに敬意を払ったあと、公式の場で発表できるくらいの記述統計表を出力するための関数を作る。"
  },
  {
    "objectID": "posts/tips01/index.html#はじめに",
    "href": "posts/tips01/index.html#はじめに",
    "title": "論文に載せる記述統計表を作る",
    "section": "",
    "text": "記述統計を出力する関数はたくさんあるけれど、どれも少しずつもの足りない。\n既存のパッケージに敬意を払ったあと、公式の場で発表できるくらいの記述統計表を出力するための関数を作る。"
  },
  {
    "objectID": "posts/tips01/index.html#目標",
    "href": "posts/tips01/index.html#目標",
    "title": "論文に載せる記述統計表を作る",
    "section": "目標",
    "text": "目標\n今回はサンプルデータであるirisを使って、Speciesごとに4変数の基本統計量を出力する。\n\nhead(iris)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\n目標は、以下の表のように、グループごとの記述統計表を作ること。 論文の規定という体で大文字小文字の区別や桁数も再現してみたい（右側の相関行列は省略）。\n\n\n\n出典：Hoetker, G. 2006. Do modular products lead to modular organizations? Strategic Management Journal 27 (6): 501–518."
  },
  {
    "objectID": "posts/tips01/index.html#既存のパッケージ",
    "href": "posts/tips01/index.html#既存のパッケージ",
    "title": "論文に載せる記述統計表を作る",
    "section": "既存のパッケージ",
    "text": "既存のパッケージ\n基本統計量を出してくれる関数として、\n\nbase::summary()\nsummarytools::descr()\npsych::describeBy()\n\nを確認する。\n\n# パッケージの読み込み\npacman::p_load(tidyverse, summarytools, psych, gt)\n\n\nbase::summary()\nとりあえずの確認には便利だけど、標準偏差とサンプル数がない。\n\nsummary(iris)\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.000   Min.   :1.000   Min.   :0.100  \n 1st Qu.:5.100   1st Qu.:2.800   1st Qu.:1.600   1st Qu.:0.300  \n Median :5.800   Median :3.000   Median :4.350   Median :1.300  \n Mean   :5.843   Mean   :3.057   Mean   :3.758   Mean   :1.199  \n 3rd Qu.:6.400   3rd Qu.:3.300   3rd Qu.:5.100   3rd Qu.:1.800  \n Max.   :7.900   Max.   :4.400   Max.   :6.900   Max.   :2.500  \n       Species  \n setosa    :50  \n versicolor:50  \n virginica :50  \n                \n                \n                \n\n\nfilter()を使ってSpeciesごとに出力することはできる。\n\niris %&gt;% \n  filter(Species == \"setosa\") %&gt;%\n  summary()\n\n  Sepal.Length    Sepal.Width     Petal.Length    Petal.Width   \n Min.   :4.300   Min.   :2.300   Min.   :1.000   Min.   :0.100  \n 1st Qu.:4.800   1st Qu.:3.200   1st Qu.:1.400   1st Qu.:0.200  \n Median :5.000   Median :3.400   Median :1.500   Median :0.200  \n Mean   :5.006   Mean   :3.428   Mean   :1.462   Mean   :0.246  \n 3rd Qu.:5.200   3rd Qu.:3.675   3rd Qu.:1.575   3rd Qu.:0.300  \n Max.   :5.800   Max.   :4.400   Max.   :1.900   Max.   :0.600  \n       Species  \n setosa    :50  \n versicolor: 0  \n virginica : 0  \n                \n                \n                \n\n\n\n\nsummarytools::descr()\nまずはそのままのdescr()。\n\niris %&gt;% \n  descr()\n\nNon-numerical variable(s) ignored: Species\n\n\nDescriptive Statistics  \niris  \nN: 150  \n\n                    Petal.Length   Petal.Width   Sepal.Length   Sepal.Width\n----------------- -------------- ------------- -------------- -------------\n             Mean           3.76          1.20           5.84          3.06\n          Std.Dev           1.77          0.76           0.83          0.44\n              Min           1.00          0.10           4.30          2.00\n               Q1           1.60          0.30           5.10          2.80\n           Median           4.35          1.30           5.80          3.00\n               Q3           5.10          1.80           6.40          3.30\n              Max           6.90          2.50           7.90          4.40\n              MAD           1.85          1.04           1.04          0.44\n              IQR           3.50          1.50           1.30          0.50\n               CV           0.47          0.64           0.14          0.14\n         Skewness          -0.27         -0.10           0.31          0.31\n      SE.Skewness           0.20          0.20           0.20          0.20\n         Kurtosis          -1.42         -1.36          -0.61          0.14\n          N.Valid         150.00        150.00         150.00        150.00\n        Pct.Valid         100.00        100.00         100.00        100.00\n\n\ngroup_by()をかませて、不要な統計量を除くとすっきり、かなり見やすい！ 変数が多すぎないときはこれでも十分かもしれない。\n\niris %&gt;% \n  group_by(Species) %&gt;%\n  descr(stats = c(\"mean\", \"sd\", \"min\", \"max\")) # 変数の指定はMeanでなくmean\n\nDescriptive Statistics  \niris  \nGroup: Species = setosa  \nN: 50  \n\n                Petal.Length   Petal.Width   Sepal.Length   Sepal.Width\n------------- -------------- ------------- -------------- -------------\n         Mean           1.46          0.25           5.01          3.43\n      Std.Dev           0.17          0.11           0.35          0.38\n          Min           1.00          0.10           4.30          2.30\n          Max           1.90          0.60           5.80          4.40\n\nGroup: Species = versicolor  \nN: 50  \n\n                Petal.Length   Petal.Width   Sepal.Length   Sepal.Width\n------------- -------------- ------------- -------------- -------------\n         Mean           4.26          1.33           5.94          2.77\n      Std.Dev           0.47          0.20           0.52          0.31\n          Min           3.00          1.00           4.90          2.00\n          Max           5.10          1.80           7.00          3.40\n\nGroup: Species = virginica  \nN: 50  \n\n                Petal.Length   Petal.Width   Sepal.Length   Sepal.Width\n------------- -------------- ------------- -------------- -------------\n         Mean           5.55          2.03           6.59          2.97\n      Std.Dev           0.55          0.27           0.64          0.32\n          Min           4.50          1.40           4.90          2.20\n          Max           6.90          2.50           7.90          3.80\n\n\nただ、このままだとgt()に渡せないのと、統計量と変数の行列を入れ替えるのが手間すぎるので断念。\n\n\npsych::describeBy()\nまずはそのままのdescribe()。変数が縦にくるタイプ。\n\niris %&gt;% \n  psych::describe()\n\n             vars   n mean   sd median trimmed  mad min max range  skew\nSepal.Length    1 150 5.84 0.83   5.80    5.81 1.04 4.3 7.9   3.6  0.31\nSepal.Width     2 150 3.06 0.44   3.00    3.04 0.44 2.0 4.4   2.4  0.31\nPetal.Length    3 150 3.76 1.77   4.35    3.76 1.85 1.0 6.9   5.9 -0.27\nPetal.Width     4 150 1.20 0.76   1.30    1.18 1.04 0.1 2.5   2.4 -0.10\nSpecies*        5 150 2.00 0.82   2.00    2.00 1.48 1.0 3.0   2.0  0.00\n             kurtosis   se\nSepal.Length    -0.61 0.07\nSepal.Width      0.14 0.04\nPetal.Length    -1.42 0.14\nPetal.Width     -1.36 0.06\nSpecies*        -1.52 0.07\n\n\ndescribeBy()を使うことで、簡単にやりたいことに近づいた。\n\niris %&gt;% \n  psych::describeBy(iris$Species)\n\n\n Descriptive statistics by group \ngroup: setosa\n             vars  n mean   sd median trimmed  mad min max range skew kurtosis\nSepal.Length    1 50 5.01 0.35    5.0    5.00 0.30 4.3 5.8   1.5 0.11    -0.45\nSepal.Width     2 50 3.43 0.38    3.4    3.42 0.37 2.3 4.4   2.1 0.04     0.60\nPetal.Length    3 50 1.46 0.17    1.5    1.46 0.15 1.0 1.9   0.9 0.10     0.65\nPetal.Width     4 50 0.25 0.11    0.2    0.24 0.00 0.1 0.6   0.5 1.18     1.26\nSpecies         5 50 1.00 0.00    1.0    1.00 0.00 1.0 1.0   0.0  NaN      NaN\n               se\nSepal.Length 0.05\nSepal.Width  0.05\nPetal.Length 0.02\nPetal.Width  0.01\nSpecies      0.00\n------------------------------------------------------------ \ngroup: versicolor\n             vars  n mean   sd median trimmed  mad min max range  skew kurtosis\nSepal.Length    1 50 5.94 0.52   5.90    5.94 0.52 4.9 7.0   2.1  0.10    -0.69\nSepal.Width     2 50 2.77 0.31   2.80    2.78 0.30 2.0 3.4   1.4 -0.34    -0.55\nPetal.Length    3 50 4.26 0.47   4.35    4.29 0.52 3.0 5.1   2.1 -0.57    -0.19\nPetal.Width     4 50 1.33 0.20   1.30    1.32 0.22 1.0 1.8   0.8 -0.03    -0.59\nSpecies         5 50 2.00 0.00   2.00    2.00 0.00 2.0 2.0   0.0   NaN      NaN\n               se\nSepal.Length 0.07\nSepal.Width  0.04\nPetal.Length 0.07\nPetal.Width  0.03\nSpecies      0.00\n------------------------------------------------------------ \ngroup: virginica\n             vars  n mean   sd median trimmed  mad min max range  skew kurtosis\nSepal.Length    1 50 6.59 0.64   6.50    6.57 0.59 4.9 7.9   3.0  0.11    -0.20\nSepal.Width     2 50 2.97 0.32   3.00    2.96 0.30 2.2 3.8   1.6  0.34     0.38\nPetal.Length    3 50 5.55 0.55   5.55    5.51 0.67 4.5 6.9   2.4  0.52    -0.37\nPetal.Width     4 50 2.03 0.27   2.00    2.03 0.30 1.4 2.5   1.1 -0.12    -0.75\nSpecies         5 50 3.00 0.00   3.00    3.00 0.00 3.0 3.0   0.0   NaN      NaN\n               se\nSepal.Length 0.09\nSepal.Width  0.05\nPetal.Length 0.08\nPetal.Width  0.04\nSpecies      0.00\n\n\n不要な列を削除して表を扱いやすくしてみる。\n\ntab &lt;- iris %&gt;% \n  describeBy(iris$Species, \n             mat = TRUE # 行列形式で出力\n            ) \n\ntab &lt;- tab[, names(tab) %in% c(\"group1\", \"mean\", \"sd\", \"min\", \"max\")] \ntab\n\n                  group1  mean        sd min max\nSepal.Length1     setosa 5.006 0.3524897 4.3 5.8\nSepal.Length2 versicolor 5.936 0.5161711 4.9 7.0\nSepal.Length3  virginica 6.588 0.6358796 4.9 7.9\nSepal.Width1      setosa 3.428 0.3790644 2.3 4.4\nSepal.Width2  versicolor 2.770 0.3137983 2.0 3.4\nSepal.Width3   virginica 2.974 0.3224966 2.2 3.8\nPetal.Length1     setosa 1.462 0.1736640 1.0 1.9\nPetal.Length2 versicolor 4.260 0.4699110 3.0 5.1\nPetal.Length3  virginica 5.552 0.5518947 4.5 6.9\nPetal.Width1      setosa 0.246 0.1053856 0.1 0.6\nPetal.Width2  versicolor 1.326 0.1977527 1.0 1.8\nPetal.Width3   virginica 2.026 0.2746501 1.4 2.5\nSpecies1          setosa 1.000 0.0000000 1.0 1.0\nSpecies2      versicolor 2.000 0.0000000 2.0 2.0\nSpecies3       virginica 3.000 0.0000000 3.0 3.0\n\n\nSpeceiesのsetosaだけ取り出して、細部を再現してみようとするけど、gt()に渡すと1列目が消えたり面倒になったのでここで撤退。\n\ntab %&gt;% \n  filter(group1 == \"setosa\") %&gt;% \n  mutate(Mean = round(mean, 2), \n         S.D. = round(sd, 2),\n         Min. = round(min, 2), # minとmaxは0があって2桁に見えない\n         Max. = round(max, 2)  # 解決法は後述\n         ) %&gt;% \n  select(Mean:Max.) %&gt;%\n  head(4) %&gt;% \n  gt()\n\n\n\n\n\n\n\nMean\nS.D.\nMin.\nMax.\n\n\n\n\n5.01\n0.35\n4.3\n5.8\n\n\n3.43\n0.38\n2.3\n4.4\n\n\n1.46\n0.17\n1.0\n1.9\n\n\n0.25\n0.11\n0.1\n0.6"
  },
  {
    "objectID": "posts/tips01/index.html#関数を自作する",
    "href": "posts/tips01/index.html#関数を自作する",
    "title": "論文に載せる記述統計表を作る",
    "section": "関数を自作する",
    "text": "関数を自作する\n論文の表を再現するためにtidyverse::summarise()とgt()を使って関数を作ってみる。\nまずは、across()を使ってすべての変数の統計量を出す。 このタイミングで、基本統計量の厳密な表記も指定しておく。\n\niris %&gt;%\n  summarise(across(.cols = where(is.numeric), # 数値型のすべての変数について\n                   .fns = list(Mean = ~ mean(.x, na.rm = TRUE), # 今回は欠損値ないけど\n                               S.D. = ~ sd(.x, na.rm = TRUE),\n                               Min. = ~ min(.x, na.rm = TRUE),\n                               Max. = ~ max(.x, na.rm = TRUE)),\n                   .names = \"{col}-{fn}\") # \"列名-関数名\"の形式で列名を作る\n              ) %&gt;% \n  round(2) %&gt;% # 小数点以下2桁に\n  format(nsmall = 2) # 0も表示させて見た目も2桁に\n\n  Sepal.Length-Mean Sepal.Length-S.D. Sepal.Length-Min. Sepal.Length-Max.\n1              5.84              0.83              4.30              7.90\n  Sepal.Width-Mean Sepal.Width-S.D. Sepal.Width-Min. Sepal.Width-Max.\n1             3.06             0.44             2.00             4.40\n  Petal.Length-Mean Petal.Length-S.D. Petal.Length-Min. Petal.Length-Max.\n1              3.76              1.77              1.00              6.90\n  Petal.Width-Mean Petal.Width-S.D. Petal.Width-Min. Petal.Width-Max.\n1             1.20             0.76             0.10             2.50\n\n\npivot_loner()で表に。\n\niris %&gt;%\n  summarise(across(.cols = where(is.numeric), \n                   .fns = list(Mean = ~ mean(.x, na.rm = TRUE), \n                               S.D. = ~ sd(.x, na.rm = TRUE),\n                               Min. = ~ min(.x, na.rm = TRUE),\n                               Max. = ~ max(.x, na.rm = TRUE)),\n                   .names = \"{col}-{fn}\") \n              ) %&gt;% \n  round(2) %&gt;% \n  format(nsmall = 2) %&gt;% \n  pivot_longer(cols = everything(), # 全ての列を縦に\n               names_to = c(\"variable\", \"stat\"), # variableとstatに分ける\n               names_sep = \"-\" # -でわける\n               ) \n\n# A tibble: 16 × 3\n   variable     stat  value   \n   &lt;chr&gt;        &lt;chr&gt; &lt;I&lt;chr&gt;&gt;\n 1 Sepal.Length Mean  5.84    \n 2 Sepal.Length S.D.  0.83    \n 3 Sepal.Length Min.  4.30    \n 4 Sepal.Length Max.  7.90    \n 5 Sepal.Width  Mean  3.06    \n 6 Sepal.Width  S.D.  0.44    \n 7 Sepal.Width  Min.  2.00    \n 8 Sepal.Width  Max.  4.40    \n 9 Petal.Length Mean  3.76    \n10 Petal.Length S.D.  1.77    \n11 Petal.Length Min.  1.00    \n12 Petal.Length Max.  6.90    \n13 Petal.Width  Mean  1.20    \n14 Petal.Width  S.D.  0.76    \n15 Petal.Width  Min.  0.10    \n16 Petal.Width  Max.  2.50    \n\n\npivot_wider()で横に。\n\niris %&gt;%\n  summarise(across(.cols = where(is.numeric), \n                   .fns = list(Mean = ~ mean(.x, na.rm = TRUE), \n                               S.D. = ~ sd(.x, na.rm = TRUE),\n                               Min. = ~ min(.x, na.rm = TRUE),\n                               Max. = ~ max(.x, na.rm = TRUE)),\n                   .names = \"{col}-{fn}\") \n              ) %&gt;% \n  round(2) %&gt;% \n  format(nsmall = 2) %&gt;% \n  pivot_longer(cols = everything(), \n               names_to = c(\"variable\", \"stat\"), \n               names_sep = \"-\" \n               ) %&gt;% \n  pivot_wider(names_from = stat, # statを列に\n              values_from = value # valueの値に\n              ) \n\n# A tibble: 4 × 5\n  variable     Mean     S.D.     Min.     Max.    \n  &lt;chr&gt;        &lt;I&lt;chr&gt;&gt; &lt;I&lt;chr&gt;&gt; &lt;I&lt;chr&gt;&gt; &lt;I&lt;chr&gt;&gt;\n1 Sepal.Length 5.84     0.83     4.30     7.90    \n2 Sepal.Width  3.06     0.44     2.00     4.40    \n3 Petal.Length 3.76     1.77     1.00     6.90    \n4 Petal.Width  1.20     0.76     0.10     2.50    \n\n\ngt()を使って見た目をより近づけていく。\n\niris %&gt;%\n  summarise(across(.cols = where(is.numeric), \n                   .fns = list(Mean = ~ mean(.x, na.rm = TRUE), \n                               S.D. = ~ sd(.x, na.rm = TRUE),\n                               Min. = ~ min(.x, na.rm = TRUE),\n                               Max. = ~ max(.x, na.rm = TRUE)),\n                   .names = \"{col}-{fn}\") \n              ) %&gt;% \n  round(2) %&gt;% \n  format(nsmall = 2) %&gt;% \n  pivot_longer(cols = everything(), \n               names_to = c(\"variable\", \"stat\"), \n               names_sep = \"-\" \n               ) %&gt;% \n  pivot_wider(names_from = stat, \n              values_from = value \n              ) %&gt;% \n  cbind(num = c(1:4),.) %&gt;% # 変数番号をつける\n  gt() %&gt;% \n  cols_label(num = \"\",\n             variable = \"\") %&gt;% # 列名を消す\n  tab_header(title = \"グループ名\") %&gt;%  # タイトル\n  tab_options(heading.align = \"left\") %&gt;%   # タイトルを左揃えに\n  tab_footnote(footnote = paste(\"*\",\"サンプル数\", \"observations.\")) # 脚注\n\n\n\n\n\n\n\nグループ名\n\n\n\n\nMean\nS.D.\nMin.\nMax.\n\n\n\n\n1\nSepal.Length\n5.84\n0.83\n4.30\n7.90\n\n\n2\nSepal.Width\n3.06\n0.44\n2.00\n4.40\n\n\n3\nPetal.Length\n3.76\n1.77\n1.00\n6.90\n\n\n4\nPetal.Width\n1.20\n0.76\n0.10\n2.50\n\n\n\n* サンプル数 observations.\n\n\n\n\n\n\n\n\n完成直前！グループごとに出力できるように微調整して関数にまとめる。\n\n\n\n\n\n\nrlangパッケージの記法、絶賛勉強中です。ムズイ。\n\n\n\n\nsummary_stats &lt;- function(df, g) { \n  # gをシンボルに変換\n  g &lt;- rlang::enquo(g)\n  \n  # グループごとのサンプル数を計算\n  n &lt;- df %&gt;% \n    filter(Species == !!g) %&gt;% \n    nrow()\n  \n  df %&gt;%\n    filter(Species == !!g) %&gt;% #\n    summarise(across(where(is.numeric), \n                     list(Mean = ~ mean(.x, na.rm = TRUE),\n                          S.D. = ~ sd(.x, na.rm = TRUE),\n                          Min. = ~ min(.x, na.rm = TRUE),\n                          Max. = ~ max(.x, na.rm = TRUE)),\n                     .names = \"{col}-{fn}\")) %&gt;% \n    round(2) %&gt;% \n    format(nsmall = 2) %&gt;% \n    pivot_longer(cols = everything(), \n                 names_to = c(\"variable\", \"stat\"), \n                 names_sep = \"-\") %&gt;% \n    pivot_wider(names_from = stat, \n                values_from = value) %&gt;% \n    cbind(num = c(1:4),.) %&gt;% \n    gt() %&gt;% \n    cols_label(num = \"\",\n               variable = \"\") %&gt;% \n    tab_header(title = rlang::as_name(g)) %&gt;%  # タイトルにグループ名gを指定\n    tab_options(heading.align = \"left\") %&gt;%   \n    tab_footnote(footnote = paste(\"*\",n, \"observations.\")) # サンプル数nをここで使う\n}\n\n\nsummary_stats(iris, \"setosa\")\n\n\n\n\n\n\n\nsetosa\n\n\n\n\nMean\nS.D.\nMin.\nMax.\n\n\n\n\n1\nSepal.Length\n5.01\n0.35\n4.30\n5.80\n\n\n2\nSepal.Width\n3.43\n0.38\n2.30\n4.40\n\n\n3\nPetal.Length\n1.46\n0.17\n1.00\n1.90\n\n\n4\nPetal.Width\n0.25\n0.11\n0.10\n0.60\n\n\n\n* 50 observations.\n\n\n\n\n\n\n\nsummary_stats(iris, \"versicolor\")\n\n\n\n\n\n\n\nversicolor\n\n\n\n\nMean\nS.D.\nMin.\nMax.\n\n\n\n\n1\nSepal.Length\n5.94\n0.52\n4.90\n7.00\n\n\n2\nSepal.Width\n2.77\n0.31\n2.00\n3.40\n\n\n3\nPetal.Length\n4.26\n0.47\n3.00\n5.10\n\n\n4\nPetal.Width\n1.33\n0.20\n1.00\n1.80\n\n\n\n* 50 observations.\n\n\n\n\n\n\n\nsummary_stats(iris, \"virginica\")\n\n\n\n\n\n\n\nvirginica\n\n\n\n\nMean\nS.D.\nMin.\nMax.\n\n\n\n\n1\nSepal.Length\n6.59\n0.64\n4.90\n7.90\n\n\n2\nSepal.Width\n2.97\n0.32\n2.20\n3.80\n\n\n3\nPetal.Length\n5.55\n0.55\n4.50\n6.90\n\n\n4\nPetal.Width\n2.03\n0.27\n1.40\n2.50\n\n\n\n* 50 observations.\n\n\n\n\n\n\n\n\nできた～～～！"
  },
  {
    "objectID": "posts/tips01/index.html#おわりに",
    "href": "posts/tips01/index.html#おわりに",
    "title": "論文に載せる記述統計表を作る",
    "section": "おわりに",
    "text": "おわりに\nデータフレームを.xlsx出力して、Excelで見た目整えた方が楽なのでは？って思いました（本末転倒）。\nsummarytools::descr()もpsych::describeBy()も全然使えるけど、やっぱりtidyverseがお気に入りかもしれない。 R上でここまで再現できるんだという学びになりました。\n今後は関数をより気軽に作るために非標準評価 (Non Standard Evaluation: NSE) を勉強していきたいです。"
  },
  {
    "objectID": "posts/tips01/index.html#参考",
    "href": "posts/tips01/index.html#参考",
    "title": "論文に載せる記述統計表を作る",
    "section": "参考",
    "text": "参考\ngt入門\n雰囲気で理解するtidy evaluation(1): tidy evaluationの導入"
  },
  {
    "objectID": "posts/tips03/index.html",
    "href": "posts/tips03/index.html",
    "title": "RstudioでPythonを使う",
    "section": "",
    "text": "RstudioでPythonを使いたい！ずっとできそうな気はしていたけど、やったことがなかったのでついに。\nAnanconda/Minicondaではなく、ライブラリはコマンドプロンプトからインストールするシンプルな方法です。\n\n\n\n\n\n\n余談：試行錯誤の過程\n\n\n\n\n\nこれまでは、昔の講義で使ったGoogle Colabratory、.pyファイルを触りたくてVS Codeを自力で入れて使っていた。\n→Google Colabはやっぱり少し使いにくいのと、VS Codeはどうやって入れたかすら覚えていないのでさよなら。\n→RstudioでPythonを使うために、Minicondaを使って仮想環境を作って…みたいなことをしていたけど、講義で導入したJupyter Notebookの環境とごちゃごちゃして断念。\n→.ipynbを触るならJupyter Notebook、.pyを触るならRstudioで、ライブラリはコマンドプロンプトでインストールする方法に落ち着いた。\n（RはGoogle ColabかRstudioなのに、どうしてPythonはこんなに選択肢があるんだ…本当に難しかった。あとは授業ごとに使う環境が変わるの大変）"
  },
  {
    "objectID": "posts/tips03/index.html#はじめに",
    "href": "posts/tips03/index.html#はじめに",
    "title": "RstudioでPythonを使う",
    "section": "",
    "text": "RstudioでPythonを使いたい！ずっとできそうな気はしていたけど、やったことがなかったのでついに。\nAnanconda/Minicondaではなく、ライブラリはコマンドプロンプトからインストールするシンプルな方法です。\n\n\n\n\n\n\n余談：試行錯誤の過程\n\n\n\n\n\nこれまでは、昔の講義で使ったGoogle Colabratory、.pyファイルを触りたくてVS Codeを自力で入れて使っていた。\n→Google Colabはやっぱり少し使いにくいのと、VS Codeはどうやって入れたかすら覚えていないのでさよなら。\n→RstudioでPythonを使うために、Minicondaを使って仮想環境を作って…みたいなことをしていたけど、講義で導入したJupyter Notebookの環境とごちゃごちゃして断念。\n→.ipynbを触るならJupyter Notebook、.pyを触るならRstudioで、ライブラリはコマンドプロンプトでインストールする方法に落ち着いた。\n（RはGoogle ColabかRstudioなのに、どうしてPythonはこんなに選択肢があるんだ…本当に難しかった。あとは授業ごとに使う環境が変わるの大変）"
  },
  {
    "objectID": "posts/tips03/index.html#pythonをインストール",
    "href": "posts/tips03/index.html#pythonをインストール",
    "title": "RstudioでPythonを使う",
    "section": "Pythonをインストール",
    "text": "Pythonをインストール\nこちらからPythonをダウンロードして、インストールに進む。\n\n\n\n\n\n\nインストールのオプション\n\n\n\n\nUse admin privileges when installing py.exe：チェックを外す\nAdd python.exe to PATH：チェックを入れる"
  },
  {
    "objectID": "posts/tips03/index.html#コマンドプロンプトから",
    "href": "posts/tips03/index.html#コマンドプロンプトから",
    "title": "RstudioでPythonを使う",
    "section": "コマンドプロンプトから",
    "text": "コマンドプロンプトから\npipのアップデートをする。\n\n\n\ncmd\n\npython -m pip install --upgrade pip"
  },
  {
    "objectID": "posts/tips03/index.html#ライブラリのインストール",
    "href": "posts/tips03/index.html#ライブラリのインストール",
    "title": "RstudioでPythonを使う",
    "section": "ライブラリのインストール",
    "text": "ライブラリのインストール\n必要なライブラリはコマンドプロンプトからインストールする。例えば、pandasとmatplotlibをインストールする場合、つなげて書いてもOK。\n\n\n\ncmd\n\npip install pandas matplotlib \n\n\nインストールされたライブラリは以下で確認できる。\n\n\n\ncmd\n\npip list\n\n\n\nRでいうところのinstall.packages()みたいな感じなので、今後Python人生で使ったことないライブラリを使いたい場合は、コマンドプロンプトからpip install xxxを実行する必要がある。"
  },
  {
    "objectID": "posts/tips03/index.html#rstudioとpythonの紐づけ",
    "href": "posts/tips03/index.html#rstudioとpythonの紐づけ",
    "title": "RstudioでPythonを使う",
    "section": "RstudioとPythonの紐づけ",
    "text": "RstudioとPythonの紐づけ\nRstudioにて、Tools &gt; Global Options… &gt; Python &gt; Select &gt; System から環境を選択して、Pythonと紐づける。"
  },
  {
    "objectID": "posts/tips03/index.html#rのパッケージ",
    "href": "posts/tips03/index.html#rのパッケージ",
    "title": "RstudioでPythonを使う",
    "section": "Rのパッケージ",
    "text": "Rのパッケージ\nRでPythonと行き来するパッケージをインストールしておく。\n\npacman::p_load(reticulate)\n\n今後、RstudioをPython仕様にするにはこちらを実行。\n\nreticulate::repl_python()\n\nPython 3.12.6 (C:/Users/azuma/AppData/Local/Programs/Python/Python312/python.exe)\nReticulate 1.39.0 REPL -- A Python interpreter in R.\nEnter 'exit' or 'quit' to exit the REPL and return to R.\n\n\nexit\n\n\n\n実行後、コンソールのカーソルが&gt;&gt;&gt;になればOK。これでPythonが使える！ 書いてある通り、exitかquitを実行するとRに戻る。"
  },
  {
    "objectID": "posts/tips03/index.html#やってみる",
    "href": "posts/tips03/index.html#やってみる",
    "title": "RstudioでPythonを使う",
    "section": "やってみる",
    "text": "やってみる\n試しにこちらからコードをお借りして実行してみた。\n\nすごい、あまり知らない景色。"
  },
  {
    "objectID": "posts/tips03/index.html#おわりに",
    "href": "posts/tips03/index.html#おわりに",
    "title": "RstudioでPythonを使う",
    "section": "おわりに",
    "text": "おわりに\nこのシンプルさにたどり着くまでほんとに長かった…。\nスクレイピングしたり、Kaggleにチャレンジしたりしたい、そのためにはPython使えないとなーと思っていたので、環境が整って嬉しい限り。\nただ、Anaconda/Minicondaを使わないデメリットがどこで発生するか、まだ分からないので使ってみてのお楽しみです。\ntidyverseとパイプ演算子に慣れ切った身でPythonと仲良くできるのか！？"
  },
  {
    "objectID": "posts/tips03/index.html#参考",
    "href": "posts/tips03/index.html#参考",
    "title": "RstudioでPythonを使う",
    "section": "参考",
    "text": "参考\nRStudio で Python を使うための環境構築: Reticulate パッケージの導入\nPythonのセットアップ"
  }
]