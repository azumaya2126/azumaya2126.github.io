{
  "hash": "d2392a681b9967c02bd50602bc9cdb58",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"RでSpotifyの分析\"\nauthor: \"azumaya\"\ndate: \"2024/05/26\"\ndate-modified: \"2024/06/03\"\nformat:\n  html:\n    code-fold: FALSE \n    # code-summary: \"Show the code\"\n    fig.align: \"center\"\ncategories:\n  - R\n  - Analysis\n  - Music\n  - Spotify\n---\n\n\n\n## はじめに\n\n世の中にPythonを使ったSpotify分析はたくさんあるけど、Rでもやってみたい。\n\nまずは、RでSpotifyの情報にアクセスできるようになり、これまでなんとなく感じていた音楽を数値的に見てみる準備をする。\n\n\n##  Spotifyの情報を使えるようにする\n\n### パッケージのインストール\n\nRでSpotifyの情報を取得するパッケージ[spotifyr](https://www.rcharlie.com/spotifyr/)がある。\nCRAN version 2.1.0であれば以下でインストールできるっぽい。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# パッケージをインストールして読み込み\npacman::p_load(spotifyr)\n```\n:::\n\n\n\n::: {.callout-tip appearance=\"simple\"}\n最近は`pacman`パッケージの`p_load()`をよく使っています。`install.packages()`と`library()`の合わせ技で、パッケージがインストールされていなかったらインストールを含め、読み込みまでやってくれる。\n\nR人生で一度だけ`pacman`をインストールしておけば、「このパッケージってインストールしてたかな」から解放されるし、パッケージ読み込みが1行で済むのは案外便利。\n\n他にも続けてライブラリを読み込みたい時は、`pacman::p_load(spotifyr, tidyverse)`のようにカンマでつなげる。\n:::\n\n### API情報を取得\n\n1.  Spotifyのアカウントで[Spotify for Developers](https://developer.spotify.com/)にログインする\n\n2.  DashboardからCreate appでappを作る\n\n3.  必要事項に入力してSave（Redirect URLsは何を入れたら分からなかったけど例に書いてあるURL入れたらOKだった。いいの？）\n\n4.  Dashboardからappを選択して、Settings \\> Basic InformationからCliant IDとClient secret（隠されている）をコピーして、以下の通り実行\n\n![](images/cliant.png){width=\"700\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setenv(SPOTIFY_CLIENT_ID = 'xxxxxxxxxxxxxxxxxxxxx')\nSys.setenv(SPOTIFY_CLIENT_SECRET = 'xxxxxxxxxxxxxxxxxxxxx')\n\naccess_token <- get_spotify_access_token()\n```\n:::\n\n\n\n\n\nこれでSpotifyの情報取り放題～\n\n\n::: {.callout-caution appearance=\"simple\"}\n\n大量のデータを取得しようとしたり、短時間に何度も`get_spotify_access_token()`を行うとAPI取得制限に引っ掛かることがあります。\n具体的にどの程度の負荷をかけるとダメなのかは分かりませんが。時間を置いて再度試してみてください。\n\n:::\n\n## 分析\n\nSpotify APIを使った分析は[こちら](/posts.html#category=Spotify)\n\n\n\n## 参考\n\n[spotifyr](https://www.rcharlie.com/spotifyr/)\n\n[【R】Spotify APIを利用して関連するアーティストをDigりまくる](https://sunaninattahito.hatenablog.com/entry/2021/06/01/202317)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}