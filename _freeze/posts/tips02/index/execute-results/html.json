{
  "hash": "64dd1fabc063dfbeda004b523164bf4f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"source関数で自作関数を呼び出す\"\nauthor: \"azumaya\"\ndate: \"2024/08/24\"\n# date-modified: \"today\"\nformat: html\n# image: image.jpg\ncategories:\n  - R\n  - Analysis\n  - Tips\n---\n\n\n\n## はじめに\n\n自作関数をはじめ、他ファイルで定義したオブジェクトを簡単に呼び出したい。\n\n`source`関数を使って、ファイルの壁を飛び越える。\n\n## 関数を自作した\n\n[前回](/posts/tips01.html)、記述統計表を出力する関数`summary_stats()`を自作した。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary_stats <- function(df, g) { \n  # gをシンボルに変換\n  g <- rlang::enquo(g)\n  \n  # グループごとのサンプル数を計算\n  n <- df %>% \n    filter(Species == !!g) %>% \n    nrow()\n  \n  df %>%\n    filter(Species == !!g) %>% #\n    summarise(across(where(is.numeric), \n                     list(Mean = ~ mean(.x, na.rm = TRUE),\n                          S.D. = ~ sd(.x, na.rm = TRUE),\n                          Min. = ~ min(.x, na.rm = TRUE),\n                          Max. = ~ max(.x, na.rm = TRUE)),\n                     .names = \"{col}-{fn}\")) %>% \n    round(2) %>% \n    format(nsmall = 2) %>% \n    pivot_longer(cols = everything(), \n                 names_to = c(\"variable\", \"stat\"), \n                 names_sep = \"-\") %>% \n    pivot_wider(names_from = stat, \n                values_from = value) %>% \n    cbind(num = c(1:4),.) %>% \n    gt() %>% \n    cols_label(num = \"\",\n               variable = \"\") %>% \n    tab_header(title = rlang::as_name(g)) %>%  # タイトルにグループ名gを指定\n    tab_options(heading.align = \"left\") %>%   \n    tab_footnote(footnote = paste(\"*\",n, \"observations.\")) # サンプル数nをここで使う\n}\n```\n:::\n\n\n\n## 自作関数をいつでも使いたい\n\nなぜ呼び出したい？\n\n### 1. 一度作った関数を何度も使いたい\n\n頑張って関数を作ったはいいものの、これを毎回コピペするのは面倒。\nこれみなさんどうしているんでしょうか。\n\n自作関数を集めたRファイルを作っていつでも呼び出せるようにしておくと便利な気がしている。\n\n::: {.callout-tip appearance=\"simple\"}\n他にもグラフ描画だったり、相関行列のテンプレにも応用できそう。\nグラフによく使うカラーパレットを指定しておいたり。（.scssの設定みたいだな）\n:::\n\n### 2. .qmdに長いコードを書きたくない\n\n雑多な分析を.Rで行い、その一部を取り出して.qmdのプレゼンテーションやドキュメントにまとめたい場面が多々ある。\n\nそんな時、.qmd上で長々と複雑なコードを書きたくないというのが正直なところ。 レンダリングに時間がかかるし、書き換え忘れのエラーが面倒だし、`cache`オプションが使いこなせていない…。\n\n今回作ったような自作関数だけでなく、もはやオブジェクトのすべてを呼び出せた方がありがたい。\n\n## 呼び出してみる\n\n自作関数含むオブジェクトは、`source`関数で呼び出せる。\n\n### `source`関数がないとき\n\n`functions.R`に作った関数`summary_stats()`を使いたいとき、`fuga.qmd`上で直接定義していない場合はエラーとなる。\n\n\n\n::: {.cell filename='fuga.qmd'}\n\n```{.r .cell-code}\nsummary_stats(df)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in summary_stats(df): could not find function \"summary_stats\"\n```\n\n\n:::\n:::\n\n\n\n### `source`関数があるとき\n\n`fuga.qmd`上で、`summary_stats()`を定義した`functions.R`を呼び出すことで関数を使えるようになる。\n\n\n\n::: {.cell filename='fuga.qmd'}\n\n```{.r .cell-code}\nsource(\"./functions.R\")\n```\n:::\n\n\n\n**`functions.R`を開いたときのEnvironmentペインが再現される**みたいなイメージと認識している。\nそのため、関数以外にも変数やデータがそのまま使えるようになる。\n\n::: {.callout-important appearance=\"simple\"}\n`functions.R`のコードを全て実行するので、あまりにも重いと時間がかかるし、ここでエラーが出ると先に進めない。\n上から下まで順番に実行されることを前提で、変数名の定義やコメントアウトを上手いことする必要がある。\n:::\n\n## ほかの発想？\n\n`source()`では、.Rを上から下まで実行してオブジェクトを呼び出していたけど、`functions.R`のオブジェクト自体を保存して、それを呼び出す方法もある。\n\n`functions.R`上で作った`summary_stats()`を`saveRDS()`で保存しておく。\n引数に変数名を入れて実行すると、`summary_stats.obj`が作成される。\n\n\n\n::: {.cell filename='functions.R'}\n\n```{.r .cell-code}\nsaveRDS(summary_stats)\n```\n:::\n\n\n\n`fuga.qmd`上で使いたい場合は、`readRDS()`で呼び出して変数に代入する。\n\n\n\n::: {.cell filename='fuga.qmd'}\n\n```{.r .cell-code}\nsummary_stats <- readRDS(\"./summary_stats.obj\")\n```\n:::\n\n\n\n\n::: {.callout-important appearance=\"simple\"}\n`source()`と違って、.Rファイルの中身を実行するわけではないので、時間は短縮できる。\nただ、`summary_stats()`の定義を書き換えた場合、同時に`saveRDS()`も実行しないと`summary_stats.obj`の中身が上書きされない。自作関数が増えていくと全然面倒かも。\n:::\n\n\n## おわりに\n\nファイルをまたいで呼び出したい内容によって、いろいろな方法がありそう。\n\n雑多な分析の.Rと、きれいにまとめたい.qmdの行き来が永遠の課題だ～～～。\n\n`cache`オプションを使いこなすしかないのか。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}